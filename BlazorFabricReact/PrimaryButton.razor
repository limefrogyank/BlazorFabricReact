@using Microsoft.JSInterop
@inject IJSRuntime  JSRuntime

<div ref="buttonRef"></div>

@functions{
        ElementRef buttonRef;
        ButtonProps buttonProps;
        HTMLEvents htmlEvents;

    [Parameter] string Text { get; set; }
    [Parameter] string AriaLabel { get; set; }
    [Parameter] string AriaDescription { get; set; }
    [Parameter] bool AriaHidden { get; set; }
    [Parameter] bool Checked { get; set; }
    [Parameter] bool Disabled{ get; set; }
    [Parameter] bool Toggle { get; set; }

    [Parameter] Action OnClick { get; set; }

    override protected async Task OnAfterRenderAsync()
    {
        if (buttonProps == null)
        {
            buttonProps = new ButtonProps()
            {
                text = this.Text,
                ariaLabel = this.AriaLabel,
                ariaDescription = this.AriaDescription,
                ariaHidden = this.AriaHidden,
                Checked = this.Checked,
                disabled = this.Disabled,
                toggle = this.Toggle
            };
        }
        if (htmlEvents == null)
        {
            htmlEvents = new HTMLEvents()
            {
                ClickAction = this.OnClick
            };
        }
        await JSRuntime.InvokeAsync<object>("reactFabric.primaryButton", buttonRef, new DotNetObjectRef(htmlEvents), buttonProps);
        await base.OnAfterRenderAsync();
    }

   
}
